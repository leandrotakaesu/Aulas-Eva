# ‚úÖ EXERC√çCIO 6 ‚Äî Polimorfismo com Heran√ßa e M√©todos Abstratos (simulado)
# Objetivo: Praticar polimorfismo em uma hierarquia de classes onde as subclasses fornecem implementa√ß√µes espec√≠ficas de um m√©todo definido (ou esperado) na superclasse.

# üìã Enunciado:

# Crie uma classe base InstrumentoMusical.

# Ela deve ter um construtor que aceita um nome para o instrumento.
# Ela deve ter um m√©todo tocar() que, por padr√£o, imprime uma mensagem como "Nome do instrumento est√° produzindo um som indefinido." 
# ou levanta um NotImplementedError para indicar que subclasses devem implement√°-lo.
# Crie duas classes filhas que herdam de InstrumentoMusical:

# Violao: O m√©todo tocar() deve imprimir "As cordas do Viol√£o est√£o vibrando: D√≥, R√©, Mi..."
# Bateria: O m√©todo tocar() deve imprimir "A Bateria est√° marcando o ritmo: TUM, TA, TUM TUM TA!"
# Crie uma fun√ß√£o apresentar_instrumento(instrumento) que recebe um objeto do tipo InstrumentoMusical (ou suas subclasses) e chama seu m√©todo tocar().

# Crie uma lista com inst√¢ncias de Violao e Bateria. Itere sobre a lista e chame apresentar_instrumento() para cada um.

# üí° Exemplo de Sa√≠da Esperada (para a itera√ß√£o):

# As cordas do Viol√£o est√£o vibrando: D√≥, R√©, Mi...
# A Bateria est√° marcando o ritmo: TUM, TA, TUM TUM TA!
# (Opcional avan√ßado: Pesquise sobre o m√≥dulo abc em Python para criar classes abstratas de verdade e marcar tocar() como um @abstractmethod.)