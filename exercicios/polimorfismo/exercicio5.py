# ‚úÖ EXERC√çCIO 5 ‚Äî Polimorfismo com "Duck Typing"
# Objetivo: Entender como o Python lida com polimorfismo atrav√©s do "Duck Typing" (se anda como um pato e grasna como um pato, ent√£o √© um pato).

# üìã Enunciado:
# Crie tr√™s classes diferentes: Pato, Cachorro e Aviao.

# A classe Pato deve ter um m√©todo fazer_som() que imprime "Quack!" e um m√©todo mover() que imprime "Pato nadando."
# A classe Cachorro deve ter um m√©todo fazer_som() que imprime "Au au!" e um m√©todo mover() que imprime "Cachorro correndo."
# A classe Aviao deve ter um m√©todo fazer_som() que imprime "VUUUUSH!" (som da turbina) e um m√©todo mover() que imprime "Avi√£o decolando."
# Crie uma fun√ß√£o chamada interagir_com_objeto(obj) que chama os m√©todos obj.fazer_som() e obj.mover().

# Crie uma lista com inst√¢ncias de Pato, Cachorro e Aviao. Itere sobre a lista e chame a fun√ß√£o interagir_com_objeto() para cada objeto. 
# Observe que a fun√ß√£o funciona para todos os objetos, mesmo que eles n√£o herdem de uma classe comum (al√©m de object).

# üí° Dica:
# O Python n√£o se importa com o tipo do objeto, contanto que ele tenha os m√©todos que est√£o sendo chamados.

